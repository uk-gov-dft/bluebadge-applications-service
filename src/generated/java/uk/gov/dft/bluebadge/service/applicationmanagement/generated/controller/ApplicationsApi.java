/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package uk.gov.dft.bluebadge.service.applicationmanagement.generated.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import uk.gov.dft.bluebadge.common.api.model.CommonResponse;
import uk.gov.dft.bluebadge.model.applicationmanagement.generated.Application;
import uk.gov.dft.bluebadge.model.applicationmanagement.generated.ApplicationResponse;
import uk.gov.dft.bluebadge.model.applicationmanagement.generated.ApplicationSummaryResponse;
import uk.gov.dft.bluebadge.model.applicationmanagement.generated.ApplicationUpdate;
import uk.gov.dft.bluebadge.model.applicationmanagement.generated.CreateApplicationResponse;
import uk.gov.dft.bluebadge.service.applicationmanagement.controller.PagingParams;
import uk.gov.dft.bluebadge.service.applicationmanagement.repository.domain.FindApplicationQueryParams;

@Api(value = "Applications", description = "the Applications API")
public interface ApplicationsApi {

  Logger log = LoggerFactory.getLogger(ApplicationsApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  @ApiOperation(
    value = "Create an application.",
    nickname = "createApplication",
    notes = "",
    response = CreateApplicationResponse.class,
    tags = {
      "applications",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(
        code = 200,
        message = "OK.  Response body contains new application id",
        response = CreateApplicationResponse.class
      ),
      @ApiResponse(code = 400, message = "Invalid request", response = CommonResponse.class)
    }
  )
  @RequestMapping(
    value = "/applications",
    produces = {"application/json"},
    method = RequestMethod.POST
  )
  default ResponseEntity<CreateApplicationResponse> createApplication(
      @ApiParam(value = "") @Valid @RequestBody Application application) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("\"\"", CreateApplicationResponse.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ApplicationsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Delete an application",
    nickname = "deleteApplication",
    notes = "Delete an application.",
    tags = {
      "applications",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(code = 200, message = "Deleted."),
      @ApiResponse(
        code = 404,
        message = "Application did not exist.",
        response = CommonResponse.class
      )
    }
  )
  @RequestMapping(value = "/applications/{applicationId}", method = RequestMethod.DELETE)
  default ResponseEntity<Void> deleteApplication(
      @ApiParam(value = "", required = true) @PathVariable("applicationId") String applicationId) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ApplicationsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Find applications.",
    nickname = "findApplications",
    notes = "Find applications. Must provide at least One query parameter. ",
    response = ApplicationSummaryResponse.class,
    tags = {
      "applications",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(
        code = 200,
        message = "Response with Zero, One or Many application summaries. ",
        response = ApplicationSummaryResponse.class
      )
    }
  )
  @RequestMapping(
    value = "/applications",
    produces = {"application/json"},
    method = RequestMethod.GET
  )
  default ResponseEntity<ApplicationSummaryResponse> findApplications(
      FindApplicationQueryParams searchParams, PagingParams pagingParams) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("\"\"", ApplicationSummaryResponse.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ApplicationsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Retrieve an application.",
    nickname = "retrieveApplication",
    notes = "Retrieve an application.",
    response = ApplicationResponse.class,
    tags = {
      "applications",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(code = 200, message = "ok.", response = ApplicationResponse.class),
      @ApiResponse(code = 404, message = "Application did not exist")
    }
  )
  @RequestMapping(
    value = "/applications/{applicationId}",
    produces = {"application/json"},
    method = RequestMethod.GET
  )
  default ResponseEntity<ApplicationResponse> retrieveApplication(
      @ApiParam(value = "", required = true) @PathVariable("applicationId") String applicationId) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("\"\"", ApplicationResponse.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ApplicationsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Update an application.",
    nickname = "updateApplication",
    notes = "",
    tags = {
      "applications",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(code = 200, message = "OK. Application was updated"),
      @ApiResponse(code = 400, message = "Invalid request", response = CommonResponse.class),
    }
  )
  @RequestMapping(value = "/applications/{applicationId}", method = RequestMethod.PUT)
  default ResponseEntity<Void> updateApplication(
      @ApiParam(value = "", required = true) @PathVariable("applicationId") String applicationId,
      @Valid @RequestBody ApplicationUpdate applicationUpdate) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ApplicationsApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
